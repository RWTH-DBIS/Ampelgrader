"""
Django settings for nbblackbox project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("NBBB_DEBUG", "false").lower() == "true"
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "THISISSOINSECURE_UwU"
if not DEBUG:
    SECRET_KEY = os.getenv("NBBB_SECRETKEY", None)
    if SECRET_KEY is None:
        raise RuntimeError("Secret Key is not set, cannot start in production mode. Please set the secret key using the NBBB_SECRETKEY env variable")

ALLOWED_HOSTS = os.getenv("NBBB_ALLOWED_HOSTS", "127.0.0.1,0.0.0.0").split(",")
if DEBUG:
    print("-------YOU ARE RUNNING IN DEBUG MODE-------")
    ALLOWED_HOSTS = ['*']

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING"
    }
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "mozilla_django_oidc",  # the oidc auth app
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "grader",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "nbblackbox.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "nbblackbox.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db.sqlite3",
    # }
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "grader",
        "USER": os.getenv("NBBB_DB_USER", "grader"),
        "PASSWORD": os.getenv("NBBB_DB_PASSWD", "secret"),
        "HOST": os.getenv("NBBB_DB_HOST", "127.0.0.1"),
        "PORT": os.getenv("NBBB_DB_PORT", "5432"),
    }
}

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", 
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = (
    "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
    # necessary for logging in via local admin password
    "django.contrib.auth.backends.ModelBackend",
)

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE = "en-us"

TIME_ZONE = "CET"

# USE_I18N = True

USE_TZ = True

# URL settings
# the url for the grader. Normally this would correspond to host/grader/,
# however in production this app should be directly available through an url
BASE_GRADER_URL = os.getenv("BASE_GRADER_URL", "http://127.0.0.1/grader")

# Email Setting
EMAIL_HOST = os.getenv("EMAIL_HOST", "localhost")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 25))
"""The email adress from which the mails are sent"""
EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
EMAIL_HEADER = os.getenv("EMAIL_HEADER", "Ampel Grader is done grading your submission.")
EMAIL_TEMPLATE = os.getenv("EMAIL_TEMPLATE",
"""
<p>Hello,</p>
<br>
<p>The Ampel-Grading of your submission is complete!</p>
<p>You can find your results <a href="{RESULT_LINK}">here</a>.</p>
<br>
<p>BR,</p>
<br>
<p>The Teaching Team,</p>
<br>
<br>
<footer style="color: darkgrey; font_size: small;">Diese Email ist autogeneriert. Bitte antworten Sie nicht auf diese E-Mail. Bei Fragen wenden Sie sich bitte an dbis-ticket@dbis.rwth-aachen.de.</footer>
""")

# the prefix to which the unique process id is appended in the mail
RESULT_LINK_PREFIX = BASE_GRADER_URL + "/results/"
"""Renders the template into a text"""
def MAIL_TEMPLATE_RENDERER(x):
    return EMAIL_TEMPLATE.format(RESULT_LINK=RESULT_LINK_PREFIX + str(x))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = ALLOWED_HOSTS[0] + "/static/" if not DEBUG else "/static/"

STATIC_ROOT = BASE_DIR / "static/"

# uncomment this to test if the static files are not served correctly by compressed storage
# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

OIDC_RP_CLIENT_ID = os.getenv("OIDC_RP_CLIENT_ID")
OIDC_RP_CLIENT_SECRET = os.getenv("OIDC_RP_CLIENT_SECRET")

# AUTH endpoint with hint to only use the rwth aachen login provider
OIDC_RP_SIGN_ALGO = os.getenv("OIDC_RP_SIGN_ALGO")
OIDC_OP_JWKS_ENDPOINT = os.getenv("OIDC_OP_JWKS_ENDPOINT")
OIDC_OP_AUTHORIZATION_ENDPOINT = os.getenv("OIDC_OP_AUTHORIZATION_ENDPOINT")
OIDC_OP_TOKEN_ENDPOINT = os.getenv("OIDC_OP_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = os.getenv("OIDC_OP_USER_ENDPOINT")
OIDC_OP_LOGOUT_ENDPOINT = os.getenv("OIDC_OP_LOGOUT_ENDPOINT")
OIDC_OP_LOGOUT_URL_METHOD = os.getenv("OIDC_OP_LOGOUT_URL_METHOD")

# necessary to show only rwth sso
OIDC_AUTH_REQUEST_EXTRA_PARAMS = {"kc_idp_hint": "rwth-aachen"}

LOGIN_REDIRECT_URL = "/grader/request/"
LOGOUT_REDIRECT_URL = "/grader/login"

# leave the not Debug pull down to force user auth in non-debug deployment
ALLOW_ANONYMOUS_GRADING = True
NEED_GRADING_AUTH = (not DEBUG) or (not ALLOW_ANONYMOUS_GRADING)

# allowed hosts are parsed from #!/usr/bin/env python
# default localhost + docker container base addres
# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,0.0.0.0").split(",")
# assume requests from our proxy as Secure
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# percentage for traffic light
PERCENTAGE_LIMITS = {
    'RED': os.getenv("RED_PERCENTAGE", "0.5"),
    'YELLOW': os.getenv("YELLOW_PERCENTAGE", "0.7")
}

USE_I18N = True

LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "de")

LANGUAGES = [
    ("de", "German"),
    ("en", "English"),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

REQUEST_TIME_LIMIT = int(os.getenv("REQUEST_TIME_LIMIT", "300"))